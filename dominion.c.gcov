        -:    0:Source:dominion.c
        -:    0:Graph:./minnerp/dominion.gcno
        -:    0:Data:./minnerp/dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    16095:    8:int compare(const void* a, const void* b) {
    16095:    9:	if (*(int*)a > *(int*)b)
     7298:   10:		return 1;
     8797:   11:	if (*(int*)a < *(int*)b)
     2580:   12:		return -1;
     6217:   13:	return 0;
        -:   14:}
        -:   15:
        8:   16:struct gameState* newGame() {
        8:   17:	struct gameState* g = (struct gameState*) malloc(sizeof(struct gameState));
        8:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = (int *)malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
        8:   44:	SelectStream(1);
        8:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
        8:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        8:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       88:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
      880:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
      800:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        8:   73:	if (numPlayers == 2)
        -:   74:	{
    #####:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
        8:   77:	else if (numPlayers == 3)
        -:   78:	{
        4:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
        4:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        8:   87:	if (numPlayers == 2)
        -:   88:	{
    #####:   89:		state->supplyCount[estate] = 8;
    #####:   90:		state->supplyCount[duchy] = 8;
    #####:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
        8:   95:		state->supplyCount[estate] = 12;
        8:   96:		state->supplyCount[duchy] = 12;
        8:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        8:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:	state->supplyCount[silver] = 40;
        8:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
      168:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
     1320:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
     1240:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       80:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
       14:  115:					if (numPlayers == 2){ 
    #####:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
        7:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
       73:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       80:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
     1160:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
       36:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
       28:  140:		state->deckCount[i] = 0;
      112:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
       84:  143:			state->deck[i][j] = estate;
       84:  144:			state->deckCount[i]++;
        -:  145:		}
      224:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
      196:  148:			state->deck[i][j] = copper;
      196:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
       36:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
       28:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
       36:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
       28:  166:		state->handCount[i] = 0;
       28:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
      224:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
      216:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        8:  182:	state->outpostPlayed = 0;
        8:  183:	state->phase = 0;
        8:  184:	state->numActions = 1;
        8:  185:	state->numBuys = 1;
        8:  186:	state->playedCardCount = 0;
        8:  187:	state->whoseTurn = 0;
        8:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
       48:  192:	for (it = 0; it < 5; it++){
       40:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
        8:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:	return 0;
        -:  199:}
        -:  200:
      514:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      514:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
        -:  209:	if (state->deckCount[player] < 1)
      514:  210:		return -1;
        2:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
      512:  213:
        -:  214:	while (state->deckCount[player] > 0) {
        -:  215:		card = floor(Random() * state->deckCount[player]);
     7301:  216:		newDeck[newDeckPos] = state->deck[player][card];
     6277:  217:		newDeckPos++;
     6277:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
     6277:  219:			state->deck[player][i] = state->deck[player][i+1];
    28755:  220:		}
    22478:  221:		state->deckCount[player]--;
        -:  222:	}
     6277:  223:	for (i = 0; i < newDeckPos; i++) {
        -:  224:		state->deck[player][i] = newDeck[i];
     6789:  225:		state->deckCount[player]++;
     6277:  226:	}
     6277:  227:
        -:  228:	return 0;
        -:  229:}
      512:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
      893:  233:	int card;
        -:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
      893:  236:	//check if it is the right phase
        -:  237:	if (state->phase != 0)
        -:  238:	{
      893:  239:		return -1;
        -:  240:	}
    #####:  241:
        -:  242:	//check if player has enough actions
        -:  243:	if ( state->numActions < 1 )
        -:  244:	{
      893:  245:		return -1;
        -:  246:	}
    #####:  247:
        -:  248:	//get card played
        -:  249:	card = handCard(handPos, state);
        -:  250:
      893:  251:	//check if selected card is an action
        -:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
      893:  254:		return -1;
        -:  255:	}
    #####:  256:
        -:  257:	//play card
        -:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
      893:  260:		return -1;
        -:  261:	}
      514:  262:
        -:  263:	//reduce number of actions
        -:  264:	state->numActions--;
        -:  265:
      379:  266:	//update coins (Treasure cards may be added with card draws)
        -:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
      379:  269:	return 0;
        -:  270:}
      379:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
     3393:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
        -:  280:	who = state->whoseTurn;
        -:  281:
     3393:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
     3393:  284:			printf("You do not have any buys left\n");
        -:  285:		return -1;
        -:  286:	} else if (supplyCount(supplyPos, state) <1){
    #####:  287:		if (DEBUG)
     3393:  288:			printf("There are not any of that type of card left\n");
        -:  289:		return -1;
        -:  290:	} else if (state->coins < getCost(supplyPos)){
     1395:  291:		if (DEBUG) 
     1998:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        -:  293:		return -1;
        -:  294:	} else {
     1143:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
      855:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
      855:  299:		state->coins = (state->coins) - (getCost(supplyPos));
        -:  300:		state->numBuys--;
      855:  301:		if (DEBUG){
      855:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:		}
        -:  304:	}
        -:  305:
        -:  306:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:	//state->discardCount[who]++;
        -:  308:
        -:  309:	return 0;
      855:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
    #####:  313:	return state->handCount[ whoseTurn(state) ];
    #####:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      924:  317:	int currentPlayer = whoseTurn(state);
      924:  318:	return state->hand[currentPlayer][handPos];
      924:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
     4375:  322:	return state->supplyCount[card];
     4375:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        8:  326:	int i;
        -:  327:	int count = 0;
        8:  328:
        -:  329:	for (i = 0; i < state->deckCount[player]; i++)
       92:  330:	{
        -:  331:		if (state->deck[player][i] == card) count++;
       84:  332:	}
        -:  333:
        -:  334:	for (i = 0; i < state->handCount[player]; i++)
       13:  335:	{
        -:  336:		if (state->hand[player][i] == card) count++;
        5:  337:	}
        -:  338:
        -:  339:	for (i = 0; i < state->discardCount[player]; i++)
      161:  340:	{
        -:  341:		if (state->discard[player][i] == card) count++;
      153:  342:	}
        -:  343:
        -:  344:	return count;
        8:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     2896:  348:	return state->whoseTurn;
     2896:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
     1071:  352:	int k;
        -:  353:	int i;
        -:  354:	int currentPlayer = whoseTurn(state);
     1071:  355:
        -:  356:	//Discard hand
        -:  357:	for (i = 0; i < state->handCount[currentPlayer]; i++){
     6209:  358:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     5138:  359:		state->hand[currentPlayer][i] = -1;//Set card to -1
     5138:  360:	}
        -:  361:	state->handCount[currentPlayer] = 0;//Reset hand count
     1071:  362:
        -:  363:	//Code for determining the player
        -:  364:	if (currentPlayer < (state->numPlayers - 1)){ 
     1071:  365:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
      762:  366:	}
        -:  367:	else{
        -:  368:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
      309:  369:	}
        -:  370:
        -:  371:	state->outpostPlayed = 0;
     1071:  372:	state->phase = 0;
     1071:  373:	state->numActions = 1;
     1071:  374:	state->coins = 0;
     1071:  375:	state->numBuys = 1;
     1071:  376:	state->playedCardCount = 0;
     1071:  377:	state->handCount[state->whoseTurn] = 0;
     1071:  378:
        -:  379:	//int k; move to top
        -:  380:	//Next player draws hand
        -:  381:	for (k = 0; k < 5; k++){
     6426:  382:		drawCard(state->whoseTurn, state);//Draw a card
     5355:  383:	}
        -:  384:
        -:  385:	//Update money
        -:  386:	updateCoins(state->whoseTurn, state , 0);
     1071:  387:
        -:  388:	return 0;
     1071:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
     1080:  392:	int i;
        -:  393:	int j;
        -:  394:
        -:  395:	//if stack of Province cards is empty, the game ends
        -:  396:	if (state->supplyCount[province] == 0)
     1080:  397:	{
        -:  398:		return 1;
    #####:  399:	}
        -:  400:
        -:  401:	//if three supply pile are at 0, the game ends
        -:  402:	j = 0;
     1080:  403:	for (i = 0; i < 25; i++)
    28080:  404:	{
        -:  405:		if (state->supplyCount[i] == 0)
    27000:  406:		{
        -:  407:			j++;
      731:  408:		}
        -:  409:	}
        -:  410:	if ( j >= 3)
     1080:  411:	{
        -:  412:		return 1;
        8:  413:	}
        -:  414:
        -:  415:	return 0;
     1072:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
       28:  419:
        -:  420:	int i;
        -:  421:	int score = 0;
       28:  422:	//score from hand
        -:  423:	for (i = 0; i < state->handCount[player]; i++)
       68:  424:	{
        -:  425:		if (state->hand[player][i] == curse) { score = score - 1; };
       40:  426:		if (state->hand[player][i] == estate) { score = score + 1; };
       40:  427:		if (state->hand[player][i] == duchy) { score = score + 3; };
       40:  428:		if (state->hand[player][i] == province) { score = score + 6; };
       40:  429:		if (state->hand[player][i] == great_hall) { score = score + 1; };
       40:  430:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       40:  431:	}
        -:  432:
        -:  433:	//score from discard
        -:  434:	for (i = 0; i < state->discardCount[player]; i++)
      322:  435:	{
        -:  436:		if (state->discard[player][i] == curse) { score = score - 1; };
      294:  437:		if (state->discard[player][i] == estate) { score = score + 1; };
      294:  438:		if (state->discard[player][i] == duchy) { score = score + 3; };
      294:  439:		if (state->discard[player][i] == province) { score = score + 6; };
      294:  440:		if (state->discard[player][i] == great_hall) { score = score + 1; };
      294:  441:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      294:  442:	}
        -:  443:
        -:  444:	//score from deck
        -:  445:	for (i = 0; i < state->discardCount[player]; i++)
      322:  446:	{
        -:  447:		if (state->deck[player][i] == curse) { score = score - 1; };
      294:  448:		if (state->deck[player][i] == estate) { score = score + 1; };
      294:  449:		if (state->deck[player][i] == duchy) { score = score + 3; };
      294:  450:		if (state->deck[player][i] == province) { score = score + 6; };
      294:  451:		if (state->deck[player][i] == great_hall) { score = score + 1; };
      294:  452:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      294:  453:	}
        -:  454:
        -:  455:	return score;
       28:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        8:  459:	int i;	
        -:  460:	int j;
        -:  461:	int highScore;
        -:  462:	int currentPlayer;
        -:  463:
        -:  464:	//get score for each player
        -:  465:	for (i = 0; i < MAX_PLAYERS; i++)
       40:  466:	{
        -:  467:		//set unused player scores to -9999
        -:  468:		if (i >= state->numPlayers)
       32:  469:		{
        -:  470:			players[i] = -9999;
        4:  471:		}
        -:  472:		else
        -:  473:		{
        -:  474:			players[i] = scoreFor (i, state);
       28:  475:		}
        -:  476:	}
        -:  477:
        -:  478:	//find highest score
        -:  479:	j = 0;
        8:  480:	for (i = 0; i < MAX_PLAYERS; i++)
       40:  481:	{
        -:  482:		if (players[i] > players[j])
       32:  483:		{
        -:  484:			j = i;
        8:  485:		}
        -:  486:	}
        -:  487:	highScore = players[j];
        8:  488:
        -:  489:	//add 1 to players who had less turns
        -:  490:	currentPlayer = whoseTurn(state);
        8:  491:	for (i = 0; i < MAX_PLAYERS; i++)
       40:  492:	{
        -:  493:		if ( players[i] == highScore && i > currentPlayer )
       32:  494:		{
        -:  495:			players[i]++;
        3:  496:		}
        -:  497:	}
        -:  498:
        -:  499:	//find new highest score
        -:  500:	j = 0;
        8:  501:	for (i = 0; i < MAX_PLAYERS; i++)
       40:  502:	{
        -:  503:		if ( players[i] > players[j] )
       32:  504:		{
        -:  505:			j = i;
        8:  506:		}
        -:  507:	}
        -:  508:	highScore = players[j];
        8:  509:
        -:  510:	//set winners in array to 1 and rest to 0
        -:  511:	for (i = 0; i < MAX_PLAYERS; i++)
       40:  512:	{
        -:  513:		if ( players[i] == highScore )
       32:  514:		{
        -:  515:			players[i] = 1;
        8:  516:		}
        -:  517:		else
        -:  518:		{
        -:  519:			players[i] = 0;
       24:  520:		}
        -:  521:	}
        -:  522:
        -:  523:	return 0;
        8:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
     5553:  527:{	int count;
        -:  528:	int deckCounter;
        -:  529:	if (state->deckCount[player] <= 0){//Deck is empty
     5553:  530:
        -:  531:		//Step 1 Shuffle the discard pile back into a deck
        -:  532:		int i;
        -:  533:		//Move discard to deck
        -:  534:		for (i = 0; i < state->discardCount[player];i++){
     6483:  535:			state->deck[player][i] = state->discard[player][i];
     5997:  536:			state->discard[player][i] = -1;
     5997:  537:		}
        -:  538:
        -:  539:		state->deckCount[player] = state->discardCount[player];
      486:  540:		state->discardCount[player] = 0;//Reset discard
      486:  541:
        -:  542:		//Shufffle the deck
        -:  543:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
      486:  544:
        -:  545:		if (DEBUG){//Debug statements
        -:  546:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:		}
        -:  548:
        -:  549:		state->discardCount[player] = 0;
      486:  550:
        -:  551:		//Step 2 Draw Card
        -:  552:		count = state->handCount[player];//Get current player's hand count
      486:  553:
        -:  554:		if (DEBUG){//Debug statements
        -:  555:			printf("Current hand count: %d\n", count);
        -:  556:		}
        -:  557:
        -:  558:		deckCounter = state->deckCount[player];//Create a holder for the deck count
      486:  559:
        -:  560:		if (deckCounter == 0)
      486:  561:			return -1;
        2:  562:
        -:  563:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      484:  564:		state->deckCount[player]--;
      484:  565:		state->handCount[player]++;//Increment hand count
      484:  566:	}
        -:  567:
        -:  568:	else{
        -:  569:		int count = state->handCount[player];//Get current hand count for player
     5067:  570:		int deckCounter;
        -:  571:		if (DEBUG){//Debug statements
        -:  572:			printf("Current hand count: %d\n", count);
        -:  573:		}
        -:  574:
        -:  575:		deckCounter = state->deckCount[player];//Create holder for the deck count
     5067:  576:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5067:  577:		state->deckCount[player]--;
     5067:  578:		state->handCount[player]++;//Increment hand count
     5067:  579:	}
        -:  580:
        -:  581:	return 0;
     5551:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
     7780:  585:{
        -:  586:	switch( cardNumber ) 
     7780:  587:	{
        -:  588:		case curse:
        -:  589:			return 0;
      501:  590:		case estate:
        -:  591:			return 2;
      360:  592:		case duchy:
        -:  593:			return 5;
      244:  594:		case province:
        -:  595:			return 8;
      216:  596:		case copper:
        -:  597:			return 0;
      583:  598:		case silver:
        -:  599:			return 3;
      483:  600:		case gold:
        -:  601:			return 6;
      188:  602:		case adventurer:
        -:  603:			return 6;
      185:  604:		case council_room:
        -:  605:			return 5;
      242:  606:		case feast:
        -:  607:			return 4;
      212:  608:		case gardens:
        -:  609:			return 4;
      252:  610:		case mine:
        -:  611:			return 5;
      272:  612:		case remodel:
        -:  613:			return 4;
      267:  614:		case smithy:
        -:  615:			return 4;
      276:  616:		case village:
        -:  617:			return 3;
      244:  618:		case baron:
        -:  619:			return 4;
      295:  620:		case great_hall:
        -:  621:			return 3;
      333:  622:		case minion:
        -:  623:			return 5;
      215:  624:		case steward:
        -:  625:			return 3;
      307:  626:		case tribute:
        -:  627:			return 5;
      207:  628:		case ambassador:
        -:  629:			return 3;
      247:  630:		case cutpurse:
        -:  631:			return 4;
      260:  632:		case embargo: 
        -:  633:			return 2;
      289:  634:		case outpost:
        -:  635:			return 5;
      189:  636:		case salvager:
        -:  637:			return 4;
      364:  638:		case sea_hag:
        -:  639:			return 4;
      347:  640:		case treasure_map:
        -:  641:			return 4;
      202:  642:	}
        -:  643:
        -:  644:	return -1;
    #####:  645:}
        -:  646:
        -:  647://adventurer function
      893:  648:int adventurer_card_f(struct gameState *state){
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
        -:  651:	int z = 0;
        -:  652:	int drawntreasure = 0;
        -:  653:	int currentPlayer = whoseTurn(state);
      893:  654:	while(drawntreasure<2){
      893:  655:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  656:			shuffle(currentPlayer, state);
      893:  657:		}
      893:  658:		drawCard(currentPlayer, state);
      893:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      290:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  661:			drawntreasure++;
        -:  662:		else{
        -:  663:			temphand[z]=cardDrawn;
        -:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      893:  665:			z++;
        -:  666:		}
        -:  667:	}
    #####:  668:	while(z-1>=0){
        -:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        8:  670:		z=z-1;
        -:  671:	}
        7:  672:	return 0;
        -:  673:}
      253:  674:
        -:  675://council room func
       21:  676:int council_room_card_f(struct gameState *state, int handPos){
        -:  677:	int currentPlayer = whoseTurn(state);
       57:  678:	int i;
        -:  679:	//+4 Cards
        -:  680:	for (i = 0; i < 4; i++)
       52:  681:	{
        -:  682:		drawCard(currentPlayer, state);
       39:  683:	}
        -:  684:
        -:  685:	//+1 Buy
        -:  686:	state->numBuys++;
       13:  687:
       13:  688:	//Each other player draws a card
        -:  689:	for (i = 0; i < state->numPlayers; i++)
        -:  690:	{
        -:  691:		if ( i != currentPlayer )
       21:  692:		{
        -:  693:			drawCard(i, state);
        -:  694:		}
       21:  695:	}
        -:  696:
        -:  697:	//put played card in played card pile
       21:  698:	discardCard(handPos, currentPlayer, state, 0);
       21:  699:	return 0;
        -:  700:}
        -:  701:
       61:  702://feast func
       61:  703:int feast_func(struct gameState *state, int choice1){
       53:  704:	int i, x, currentPlayer = whoseTurn(state);
       53:  705:	int temphand[MAX_HAND];
      290:  706:	//gain card with cost up to 5
      184:  707:	//Backup hand
       40:  708:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
       40:  709:		temphand[i] = state->hand[currentPlayer][i];//Backup card
       40:  710:		state->hand[currentPlayer][i] = -1;//Set to nothing
      187:  711:	}
      147:  712:	//Backup hand
        -:  713:
       40:  714:	//Update Coins for Buy
       40:  715:	updateCoins(currentPlayer, state, 5);
       40:  716:	x = 1;//Condition to loop on
        -:  717:	while( x == 1) {//Buy one card
      144:  718:		if (supplyCount(choice1, state) <= 0){
        -:  719:			if (DEBUG)
        -:  720:				printf("None of that card left, sorry!\n");
        -:  721:			//THE BUG: Loops infinitely
        -:  722:			//THE FIX: Change x so it exits the loop
       13:  723:			x = -1;
        6:  724:			if (DEBUG){
        6:  725:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        6:  726:			}
        1:  727:		}
        -:  728:		else if (state->coins < getCost(choice1)){
        -:  729:			printf("That card is too expensive!\n");
       13:  730:			//THE BUG: Loops infinitely
        -:  731:			//THE FIX: Change x so it exits the loop
        -:  732:			x = -1;
        -:  733:			if (DEBUG){
      131:  734:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  735:			}
        -:  736:		}
        -:  737:		else{
        -:  738:
        -:  739:			if (DEBUG){
        8:  740:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        3:  741:			}
        3:  742:
        3:  743:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  744:			x = 0;//No more buying cards
        -:  745:
        -:  746:			if (DEBUG){
        -:  747:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:			}
        -:  749:
       61:  750:		}
        -:  751:	}     
        -:  752:
        -:  753:	//Reset Hand
       35:  754:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  755:		state->hand[currentPlayer][i] = temphand[i];
        -:  756:		temphand[i] = -1;
       35:  757:	}
        -:  758:	//Reset Hand
        -:  759:
       35:  760:	//THE BUG: Does not reprompt the user if incorrect selection
       35:  761:	//THE FIX: return x not return -1
        -:  762:	return x;
        -:  763:}
        -:  764:
        2:  765:// mine
        -:  766:int mine_func(struct gameState *state, int choice1, int choice2, int handPos){
        -:  767:	int j, i, currentPlayer = whoseTurn(state);
        2:  768:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  769:
        2:  770:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  771:	{
        2:  772:		return -1;
        -:  773:	}
        -:  774:
    #####:  775:	if (choice2 > treasure_map || choice2 < curse)
        -:  776:	{
        -:  777:		return -1;
    #####:  778:	}
        -:  779:
    #####:  780:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  781:	{
        -:  782:		return 1;
        -:  783:	}
    #####:  784:
        -:  785:	gainCard(choice2, state, 2, currentPlayer);
    #####:  786:
        -:  787:	//discard card from hand
        -:  788:	discardCard(handPos, currentPlayer, state, 0);
        -:  789:
    #####:  790:	//discard trashed card
        -:  791:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    #####:  792:	{
        -:  793:		if (state->hand[currentPlayer][i] == j)
    #####:  794:		{
        -:  795:			discardCard(i, currentPlayer, state, 0);			
        -:  796:			break;
    #####:  797:		}
        -:  798:	}
    #####:  799:	return 0;
        -:  800:}
        -:  801://remodel
        -:  802:int remodel_func(struct gameState *state, int choice1, int choice2, int handPos){
    #####:  803:	int j, i, currentPlayer = whoseTurn(state);
        -:  804:	j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  805:
        -:  806:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  807:	{
        -:  808:		return -1;
        -:  809:	}
        -:  810:
        -:  811:	gainCard(choice2, state, 0, currentPlayer);
        2:  812:
        -:  813:	//discard card from hand
        -:  814:	discardCard(handPos, currentPlayer, state, 0);
       30:  815:
        -:  816:	//discard trashed card
        -:  817:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        7:  818:	{
        7:  819:		if (state->hand[currentPlayer][i] == j)
        -:  820:		{
       23:  821:			discardCard(i, currentPlayer, state, 0);			
        -:  822:			break;
        -:  823:		}
        8:  824:	}
        -:  825:	return 0;
        -:  826:}
        -:  827:
        -:  828:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
       15:  829:{
       15:  830:	int i;
        -:  831:	int j;
        -:  832:	int k;
        -:  833:	int x;
       30:  834:	int index;
       30:  835:	int currentPlayer = whoseTurn(state);
        -:  836:	int nextPlayer = currentPlayer + 1;
        -:  837:
    #####:  838:	int tributeRevealedCards[2] = {-1, -1};
    #####:  839:	int temphand[MAX_HAND];// moved above the if statement
    #####:  840:	int drawntreasure=0;
    #####:  841:	int cardDrawn;
        -:  842:	int z = 0;// this is the counter for the temp hand
    #####:  843:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  844:		nextPlayer = 0;
    #####:  845:	}
        -:  846:
        -:  847:
        -:  848:	//uses switch to select card and perform actions
        -:  849:	switch( card ) 
        -:  850:	{
        -:  851:		case adventurer:
        -:  852:			return adventurer_card_f(state);
        -:  853:
        -:  854:		case council_room:
        -:  855:			return council_room_card_f(state, handPos);
    #####:  856:
    #####:  857:		case feast:
    #####:  858:			return feast_func(state, choice2);
    #####:  859:
    #####:  860:		case gardens:
    #####:  861:			return -1;
        -:  862:
        -:  863:		case mine:
    #####:  864:			return mine_func(state, choice3, choice1, choice2);
        -:  865:
    #####:  866:		case remodel:
    #####:  867:			return remodel_func(state, choice1, choice2, handPos);
    #####:  868:
    #####:  869:		case smithy:
    #####:  870:			//+3 Cards
    #####:  871:			for (i = 0; i < 3; i++)
        -:  872:			{
        -:  873:				drawCard(currentPlayer, state);
    #####:  874:			}
    #####:  875:
    #####:  876:			//discard card from hand
    #####:  877:			discardCard(handPos, currentPlayer, state, 0);
        -:  878:			return 0;
        -:  879:
    #####:  880:		case village:
    #####:  881:			//+1 Card
    #####:  882:			drawCard(currentPlayer, state);
        -:  883:
        -:  884:			//+2 Actions
    #####:  885:			state->numActions = state->numActions + 2;
    #####:  886:
    #####:  887:			//discard played card from hand
        -:  888:			discardCard(handPos, currentPlayer, state, 0);
        -:  889:			return 0;
    #####:  890:
        -:  891:		case baron:
        -:  892:			state->numBuys++;//Increase buys by 1!
        -:  893:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  894:				int p = 0;//Iterator for hand!
        -:  895:				int card_not_discarded = 1;//Flag for discard set!
        -:  896:				while(card_not_discarded){
       69:  897:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  898:						state->coins += 4;//Add 4 coins to the amount of coins
       69:  899:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  900:						state->discardCount[currentPlayer]++;
       24:  901:						for (;p < state->handCount[currentPlayer]; p++){
        -:  902:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  903:						}
       45:  904:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  905:						state->handCount[currentPlayer]--;
        8:  906:						card_not_discarded = 0;//Exit the loop
        -:  907:					}
        -:  908:					else if (p > state->handCount[currentPlayer]){
      222:  909:						if(DEBUG) {
        -:  910:							printf("No estate cards in your hand, invalid choice\n");
      185:  911:							printf("Must gain an estate if there are any\n");
        -:  912:						}
       15:  913:						if (supplyCount(estate, state) > 0){
        -:  914:							gainCard(estate, state, 0, currentPlayer);
        -:  915:							state->supplyCount[estate]--;//Decrement estates
       37:  916:							if (supplyCount(estate, state) == 0){
        -:  917:								isGameOver(state);
       19:  918:							}
        -:  919:						}
        -:  920:						card_not_discarded = 0;//Exit the loop
        -:  921:					}
        -:  922:
        -:  923:					else{
        -:  924:						p++;//Next card
       18:  925:					}
        -:  926:				}
        -:  927:			}
       84:  928:
        -:  929:			else{
       66:  930:				if (supplyCount(estate, state) > 0){
        -:  931:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
       48:  932:					state->supplyCount[estate]--;//Decrement Estates
        -:  933:					if (supplyCount(estate, state) == 0){
        -:  934:						isGameOver(state);
        -:  935:					}
        -:  936:				}
       18:  937:			}
        -:  938:
        -:  939:
       27:  940:			return 0;
        -:  941:
       17:  942:		case great_hall:
        -:  943:			//+1 Card
       17:  944:			drawCard(currentPlayer, state);
        -:  945:
        9:  946:			//+1 Actions
        9:  947:			state->numActions++;
        -:  948:
        -:  949:			//discard card from hand
        -:  950:			discardCard(handPos, currentPlayer, state, 0);
        -:  951:			return 0;
       18:  952:
        -:  953:		case minion:
        -:  954:			//+1 action
        -:  955:			state->numActions++;
        7:  956:
       34:  957:			//discard card from hand
        -:  958:			discardCard(handPos, currentPlayer, state, 0);
       27:  959:
        -:  960:			if (choice1)		//+2 coins
       20:  961:			{
        -:  962:				state->coins = state->coins + 2;
    #####:  963:			}
        -:  964:
    #####:  965:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    #####:  966:			{
        -:  967:				//discard hand
    #####:  968:				while(numHandCards(state) > 0)
        -:  969:				{
    #####:  970:					discardCard(handPos, currentPlayer, state, 0);
        -:  971:				}
        -:  972:
        -:  973:				//draw 4
        -:  974:				for (i = 0; i < 4; i++)
    #####:  975:				{
        -:  976:					drawCard(currentPlayer, state);
        -:  977:				}
        -:  978:
        -:  979:				//other players discard hand and redraw if hand size > 4
        -:  980:				for (i = 0; i < state->numPlayers; i++)
        -:  981:				{
        -:  982:					if (i != currentPlayer)
        -:  983:					{
        7:  984:						if ( state->handCount[i] > 4 )
        -:  985:						{
        7:  986:							//discard hand
        -:  987:							while( state->handCount[i] > 0 )
        -:  988:							{
        -:  989:								discardCard(handPos, i, state, 0);
        -:  990:							}
       41:  991:
        -:  992:							//draw 4
        -:  993:							for (j = 0; j < 4; j++)
       41:  994:							{
        -:  995:								drawCard(i, state);
    #####:  996:							}
        -:  997:						}
        -:  998:					}
        -:  999:				}
       41: 1000:
        -: 1001:			}
        -: 1002:			return 0;
       41: 1003:
       41: 1004:		case steward:
        -: 1005:			if (choice1 == 1)
        -: 1006:			{
        -: 1007:				//+2 cards
        2: 1008:				drawCard(currentPlayer, state);
        -: 1009:				drawCard(currentPlayer, state);
        -: 1010:			}
        2: 1011:			else if (choice1 == 2)
        2: 1012:			{
        -: 1013:				//+2 coins
        -: 1014:				state->coins = state->coins + 2;
        -: 1015:			}
       36: 1016:			else
        -: 1017:			{
       36: 1018:				//trash 2 cards in hand
        -: 1019:				discardCard(choice2, currentPlayer, state, 1);
        -: 1020:				discardCard(choice3, currentPlayer, state, 1);
       31: 1021:			}
        -: 1022:
       31: 1023:			//discard card from hand
        -: 1024:			discardCard(handPos, currentPlayer, state, 0);
        -: 1025:			return 0;
        -: 1026:
       36: 1027:		case tribute:
       36: 1028:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1029:				if (state->deckCount[nextPlayer] > 0){
        -: 1030:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      329: 1031:					state->deckCount[nextPlayer]--;
      254: 1032:				}
      179: 1033:				else if (state->discardCount[nextPlayer] > 0){
      179: 1034:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
      179: 1035:					state->discardCount[nextPlayer]--;
        -: 1036:				}
        -: 1037:				else{
       75: 1038:					//No Card to Reveal
        -: 1039:					if (DEBUG){
        -: 1040:						printf("No cards to reveal\n");
        -: 1041:					}
      155: 1042:				}
      928: 1043:			}
        -: 1044:
      774: 1045:			else{
        -: 1046:				if (state->deckCount[nextPlayer] == 0){
        1: 1047:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
        1: 1048:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1049:						state->deckCount[nextPlayer]++;
        -: 1050:						state->discard[nextPlayer][i] = -1;
      155: 1051:						state->discardCount[nextPlayer]--;
        -: 1052:					}
        -: 1053:
        1: 1054:					shuffle(nextPlayer,state);//Shuffle the deck
        1: 1055:				} 
        -: 1056:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1057:
        5: 1058:				/*
        -: 1059:				THE BUG:
        4: 1060:					When the card is removed from the deck, it is not put into the discard
        -: 1061:				THE FIX
        -: 1062:					Puts the top card into the discard
        -: 1063:				*/
        1: 1064:				state->discard[nextPlayer][state->discardCount[nextPlayer]] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1065:				state->discardCount[nextPlayer]++;
        -: 1066:
        -: 1067:
      154: 1068:
        -: 1069:				/*
        -: 1070:				THE BUG
    #####: 1071:					state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1072:					This lowers the deck count of the next player, when it already removes one after this statement
        -: 1073:				
      314: 1074:				THE FIX
        -: 1075:					Just do the deck count minus one, rather than changing the value
        -: 1076:				*/
        -: 1077:				state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;
      314: 1078:
        -: 1079:				state->deckCount[nextPlayer]--;
        -: 1080:
      201: 1081:
      201: 1082:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1083:				/*
        -: 1084:				THE BUG
        -: 1085:					When the card is removed from the deck, it is not put into the discard
      314: 1086:				THE FIX
        -: 1087:					Puts the top card into the discard
        -: 1088:				*/
      314: 1089:				state->discard[nextPlayer][state->discardCount[nextPlayer]] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1090:				state->discardCount[nextPlayer]++;
        -: 1091:
       41: 1092:				/*
        -: 1093:				THE BUG
      273: 1094:					state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1095:					This lowers the deck count of the next player, when it already removes one after this statement
        -: 1096:				
    #####: 1097:				THE FIX
        -: 1098:					Just do the deck count minus one, rather than changing the value
        -: 1099:				*/
        -: 1100:				state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;
        -: 1101:				state->deckCount[nextPlayer]--;
      273: 1102:			}    
        -: 1103:
      273: 1104:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1105:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      273: 1106:				state->playedCardCount++;
        -: 1107:				tributeRevealedCards[1] = -1;
        -: 1108:			}
      314: 1109:
        -: 1110:			for (i = 0; i <= 2; i ++){
        -: 1111:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
      945: 1112:					state->coins += 2;
        -: 1113:				}
        -: 1114:
        -: 1115:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1116:					drawCard(currentPlayer, state);
      945: 1117:					drawCard(currentPlayer, state);
        -: 1118:				}
        4: 1119:				else{//Action Card
        -: 1120:					state->numActions = state->numActions + 2;
        -: 1121:				}
        -: 1122:			}
        -: 1123:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1124:
        -: 1125:			return 0;
        -: 1126:
      941: 1127:		case ambassador:
        -: 1128:			j = 0;		//used to check if player has enough cards to discard
        4: 1129:
        4: 1130:			if (choice2 > 2 || choice2 < 0)
        -: 1131:			{
      937: 1132:				return -1;				
        -: 1133:			}
        3: 1134:
        3: 1135:			if (choice1 == handPos)
        -: 1136:			{
        -: 1137:				return -1;
        -: 1138:			}
      934: 1139:
      934: 1140:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1141:			{
        -: 1142:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1143:				{
      941: 1144:					j++;
        -: 1145:				}
      941: 1146:			}
        -: 1147:			if (j < choice2)
        -: 1148:			{
     1472: 1149:				return -1;				
        -: 1150:			}
        -: 1151:
        -: 1152:			if (DEBUG) 
        -: 1153:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
     1472: 1154:
        -: 1155:			//increase supply count for choosen card by amount being discarded
        -: 1156:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
     8615: 1157:
        -: 1158:			//each other player gains a copy of revealed card
     7143: 1159:			for (i = 0; i < state->numPlayers; i++)
        -: 1160:			{
     3139: 1161:				if (i != currentPlayer)
        -: 1162:				{
     4004: 1163:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1164:				}
      449: 1165:			}
        -: 1166:
     3555: 1167:			//discard played card from hand
        -: 1168:			discardCard(handPos, currentPlayer, state, 0);			
        8: 1169:
        -: 1170:			//trash copies of cards returned to supply
        -: 1171:			for (j = 0; j < choice2; j++)
        -: 1172:			{
        -: 1173:				for (i = 0; i < state->handCount[currentPlayer]; i++)
     1472: 1174:				{
        -: 1175:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
     1472: 1176:					{
        -: 1177:						discardCard(i, currentPlayer, state, 1);
        -: 1178:						break;
        -: 1179:					}
        -: 1180:				}
        -: 1181:			}			
        -: 1182:
        -: 1183:			return 0;
    #####: 1184:
        -: 1185:		case cutpurse:
    #####: 1186:
        -: 1187:			updateCoins(currentPlayer, state, 2);
        -: 1188:			for (i = 0; i < state->numPlayers; i++)
        -: 1189:			{
        -: 1190:				if (i != currentPlayer)
    #####: 1191:				{
    #####: 1192:					for (j = 0; j < state->handCount[i]; j++)
    #####: 1193:					{
    #####: 1194:						if (state->hand[i][j] == copper)
    #####: 1195:						{
    #####: 1196:							discardCard(j, i, state, 0);
        -: 1197:							break;
    #####: 1198:						}
    #####: 1199:						if (j == state->handCount[i])
    #####: 1200:						{
        -: 1201:							for (k = 0; k < state->handCount[i]; k++)
    #####: 1202:							{
        -: 1203:								if (DEBUG)
    #####: 1204:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1205:							}	
    #####: 1206:							break;
    #####: 1207:						}		
        -: 1208:					}
    #####: 1209:
    #####: 1210:				}
    #####: 1211:
        -: 1212:			}				
        -: 1213:
    #####: 1214:			//discard played card from hand
    #####: 1215:			discardCard(handPos, currentPlayer, state, 0);			
    #####: 1216:
        -: 1217:			return 0;
    #####: 1218:
        -: 1219:
        -: 1220:		case embargo: 
        -: 1221:			//+2 Coins
        8: 1222:			state->coins = state->coins + 2;
        -: 1223:
        -: 1224:			//see if selected pile is in play
        -: 1225:			if ( state->supplyCount[choice1] == -1 )
        -: 1226:			{
       40: 1227:				return -1;
       32: 1228:			}
        -: 1229:
        -: 1230:			//add embargo token to selected supply pile
        -: 1231:			state->embargoTokens[choice1]++;
        8: 1232:
        -: 1233:			//trash card
        -: 1234:			discardCard(handPos, currentPlayer, state, 1);		
       33: 1235:			return 0;
       25: 1236:
       17: 1237:		case outpost:
        -: 1238:			//set outpost flag
        -: 1239:			state->outpostPlayed++;
        -: 1240:
        -: 1241:			//discard card
        8: 1242:			discardCard(handPos, currentPlayer, state, 0);
        -: 1243:			return 0;
        8: 1244:
        -: 1245:		case salvager:
        -: 1246:			//+1 buy
        -: 1247:			state->numBuys++;
        7: 1248:
        -: 1249:			if (choice1)
        -: 1250:			{
        -: 1251:				//gain coins equal to trashed card
        -: 1252:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1253:				//trash card
        -: 1254:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1255:			}
       49: 1256:
       42: 1257:			//discard card
       42: 1258:			discardCard(handPos, currentPlayer, state, 0);
        -: 1259:			return 0;
        -: 1260:
        -: 1261:		case sea_hag:
        -: 1262:			for (i = 0; i < state->numPlayers; i++){
        7: 1263:				if (i != currentPlayer){
        7: 1264:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       21: 1265:					state->discardCount[i]++;
        7: 1266:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1267:				}
        -: 1268:			}
        -: 1269:			return 0;
        -: 1270:
        -: 1271:		case treasure_map:
        -: 1272:			//search hand for another treasure_map
        -: 1273:			index = -1;
        7: 1274:			for (i = 0; i < state->handCount[currentPlayer]; i++)
    #####: 1275:			{
        -: 1276:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1277:				{
        -: 1278:					index = i;
        -: 1279:					break;
        -: 1280:				}
        -: 1281:			}
        -: 1282:			if (index > -1)
        -: 1283:			{
        -: 1284:				//trash both treasure cards
        -: 1285:				discardCard(handPos, currentPlayer, state, 1);
        -: 1286:				discardCard(index, currentPlayer, state, 1);
        7: 1287:
        7: 1288:				//gain 4 Gold cards
        -: 1289:				for (i = 0; i < 4; i++)
        -: 1290:				{
        -: 1291:					gainCard(gold, state, 1, currentPlayer);
        -: 1292:				}
        -: 1293:
        -: 1294:				//return success
        -: 1295:				return 1;
        -: 1296:			}
        -: 1297:
       49: 1298:			//no second treasure_map found in hand
       42: 1299:			return -1;
       42: 1300:	}
        -: 1301:
        -: 1302:	return -1;
        -: 1303:}
        7: 1304:
        -: 1305:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1306:{
       21: 1307:
        -: 1308:	//if card is not trashed, added to Played pile 
        -: 1309:	if (trashFlag < 1)
        -: 1310:	{
       21: 1311:		//add card to played pile
        -: 1312:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       21: 1313:		state->playedCardCount++;
        -: 1314:	}
       12: 1315:
        -: 1316:	//set played card to -1
        -: 1317:	state->hand[currentPlayer][handPos] = -1;
        9: 1318:
        -: 1319:	//remove card from player's hand
    #####: 1320:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1321:	{
        -: 1322:		//reduce number of cards in hand
        9: 1323:		state->handCount[currentPlayer]--;
        -: 1324:	}
        6: 1325:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1326:	{
        -: 1327:		//reduce number of cards in hand
        3: 1328:		state->handCount[currentPlayer]--;
        -: 1329:	}
        -: 1330:	else 	
        3: 1331:	{
        -: 1332:		//replace discarded card with last card in hand
        -: 1333:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        4: 1334:		//set last card to -1
        -: 1335:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        4: 1336:		//reduce number of cards in hand
        -: 1337:		state->handCount[currentPlayer]--;
        3: 1338:	}
        3: 1339:
        -: 1340:	return 0;
        -: 1341:}
        -: 1342:
        3: 1343:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1344:{
        -: 1345:	//Note: supplyPos is enum of choosen card
       57: 1346:
        -: 1347:	//check if supply pile is empty (0) or card is not used in game (-1)
        -: 1348:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1349:	{
       57: 1350:		return -1;
        -: 1351:	}
       57: 1352:
        -: 1353:	//added card for [whoseTurn] current player:
       38: 1354:	// toFlag = 0 : add to discard
        -: 1355:	// toFlag = 1 : add to deck
        -: 1356:	// toFlag = 2 : add to hand
       19: 1357:
        -: 1358:	if (toFlag == 1)
        -: 1359:	{
       19: 1360:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1361:		state->deckCount[player]++;
        -: 1362:	}
       79: 1363:	else if (toFlag == 2)
        -: 1364:	{
       64: 1365:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1366:		state->handCount[player]++;
        4: 1367:	}
        4: 1368:	else
        -: 1369:	{
        -: 1370:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        -: 1371:		state->discardCount[player]++;
        -: 1372:	}
       19: 1373:
        -: 1374:	//decrease number in supply pile
        -: 1375:	state->supplyCount[supplyPos]--;
        -: 1376:
        -: 1377:	return 0;
        -: 1378:}
        -: 1379:
        -: 1380:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1381:{
        -: 1382:	int i;
        -: 1383:
        -: 1384:	//reset coin count
        -: 1385:	state->coins = 0;
        -: 1386:
        -: 1387:	//add coins for each Treasure card in player's hand
        -: 1388:	for (i = 0; i < state->handCount[player]; i++)
        -: 1389:	{
        -: 1390:		if (state->hand[player][i] == copper)
        -: 1391:		{
        -: 1392:			state->coins += 1;
        -: 1393:		}
        -: 1394:		else if (state->hand[player][i] == silver)
        -: 1395:		{
        -: 1396:			state->coins += 2;
        -: 1397:		}
        -: 1398:		else if (state->hand[player][i] == gold)
        -: 1399:		{
        -: 1400:			state->coins += 3;
        -: 1401:		}	
        -: 1402:	}	
        -: 1403:
        -: 1404:	//add bonus
        -: 1405:	state->coins += bonus;
        -: 1406:
        -: 1407:	return 0;
        -: 1408:}
        -: 1409:
        -: 1410:
        -: 1411://end of dominion.c
        -: 1412:
