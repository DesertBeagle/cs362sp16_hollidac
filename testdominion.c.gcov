        -:    0:Source:testdominion.c
        -:    0:Graph:testdominion.gcno
        -:    0:Data:testdominion.gcda
        -:    0:Runs:12
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "util.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <termios.h>
        -:    6:
    #####:    7:char getch() {
    $$$$$:    7-block  0
    #####:    8:	char buf = 0;
    #####:    9:	struct termios old = {0};
    #####:   10:	if (tcgetattr(0, &old) < 0)
    $$$$$:   10-block  0
    #####:   11:		perror("tcsetattr()");
    $$$$$:   11-block  0
    #####:   12:	old.c_lflag &= ~ICANON;
    #####:   13:	old.c_lflag &= ~ECHO;
    #####:   14:	old.c_cc[VMIN] = 1;
    #####:   15:	old.c_cc[VTIME] = 0;
    #####:   16:	if (tcsetattr(0, TCSANOW, &old) < 0)
    $$$$$:   16-block  0
    #####:   17:		perror("tcsetattr ICANON");
    $$$$$:   17-block  0
    #####:   18:	if (read(0, &buf, 1) < 0)
    $$$$$:   18-block  0
    #####:   19:		perror ("read()");
    $$$$$:   19-block  0
    #####:   20:	old.c_lflag |= ICANON;
    #####:   21:	old.c_lflag |= ECHO;
    #####:   22:	if (tcsetattr(0, TCSADRAIN, &old) < 0)
    $$$$$:   22-block  0
    #####:   23:		perror ("tcsetattr ~ICANON");
    $$$$$:   23-block  0
    #####:   24:	return (buf);
    $$$$$:   24-block  0
        -:   25:}
        -:   26:
    #####:   27:void printGame(struct gameState *game, int full){
    $$$$$:   27-block  0
        -:   28:	int i, j;
    #####:   29:	printf("Full Game State:\n");
    $$$$$:   29-block  0
    #####:   30:	printf("Number of players: %d\n", game->numPlayers);
    #####:   31:	printf("Supplies:\n");
    #####:   32:	for(i = 0; i < treasure_map+1; i++){
    $$$$$:   32-block  0
    #####:   33:		printf("\tSupply: %d\tCount: %d\tEmbargo tokens: %d\n", i, game->supplyCount[i], game->embargoTokens[i]);;
    $$$$$:   33-block  0
        -:   34:	}
    #####:   35:	printf("Outpost played: %d\tOutpost Turn: %d\n", game->outpostPlayed, game->outpostTurn);
    $$$$$:   35-block  0
    #####:   36:	printf("Phase: %d\tNumber of actions: %d\t Coins: %d\tNumber of buys: %d\n", game->phase, game->numActions, game->coins, game->numBuys);
        -:   37:
    #####:   38:	for(i = 0; i < game->numPlayers; i++){
    $$$$$:   38-block  0
    #####:   39:		printf("Player %d:\n\tHand Count: %d\n\t\t", i+1, game->handCount[i]);
    $$$$$:   39-block  0
    #####:   40:		for(j = 0; j < game->handCount[i]; j++){
    $$$$$:   40-block  0
    #####:   41:			printf("%d ", game->hand[i][j]);
    $$$$$:   41-block  0
        -:   42:		}
    #####:   43:		printf("\n\tDeck Count: %d\n\t\t", game->deckCount[i]);
    $$$$$:   43-block  0
    #####:   44:		for(j = 0; j < game->deckCount[i]; j++){
    $$$$$:   44-block  0
    #####:   45:			printf("%d ", game->deck[i][j]);
    $$$$$:   45-block  0
        -:   46:		}
    #####:   47:		printf("\n\tNum Discard: %d\n\t\t", game->discardCount[i]);
    $$$$$:   47-block  0
    #####:   48:		for(j = 0; j < game->discardCount[i]; j++){
    $$$$$:   48-block  0
    #####:   49:			printf("%d ", game->discard[i][j]);
    $$$$$:   49-block  0
        -:   50:		}
    #####:   51:		puts("");
    $$$$$:   51-block  0
        -:   52:	}
        -:   53:
    #####:   54:	printf("\nPlayed Cards: %d\n\t", game->playedCardCount);
    $$$$$:   54-block  0
    #####:   55:	for(i = 0; i < game->playedCardCount; i++)
    $$$$$:   55-block  0
    #####:   56:		printf("%d ", game->playedCards[i]);
    $$$$$:   56-block  0
    #####:   57:	puts("");
    $$$$$:   57-block  0
    #####:   58:	fflush(stdout);
    #####:   59:}
        -:   60:
       12:   61:int main(int argc, char *argv[]){
       12:   61-block  0
        -:   62:	int seed, king[10], i,j,k;
        -:   63:	int numPlayers, handCount;
        -:   64:
       12:   65:	struct gameState *game = newGame();
       12:   65-block  0
        -:   66:
        -:   67:	//====================SETUP=SPAGHETTI=============================
       12:   68:	if(!allint(argv, argc, 2)){
    #####:   69:		return 0;
    $$$$$:   69-block  0
        -:   70:	}
       12:   71:	seed = atoi(argv[1]);
       12:   71-block  0
       12:   72:	srand(seed);
        -:   73:
      180:   74:	for(i = 0; i < 10; i++){
      168:   74-block  0
      180:   74-block  1
      168:   75:		king[i] = rand()%(treasure_map - adventurer + 1) + adventurer;
      168:   75-block  0
      924:   76:		for(j = 0; j < i; j++){
      756:   76-block  0
      924:   76-block  1
      756:   77:			if(king[i] == king[j]){
      756:   77-block  0
       48:   78:				i--;
       48:   78-block  0
        -:   79:			}
        -:   80:		}
        -:   81:	}
        -:   82:
       12:   83:	numPlayers = rand()%2 + 3;
       12:   83-block  0
        -:   84:
       12:   85:	initializeGame(numPlayers, king, seed, game);
        -:   86:	//================================================================
        -:   87:
     2088:   88:	while(!isGameOver(game)){
     2088:   88-block  0
     2076:   89:		handCount = game->handCount[game->whoseTurn];
        -:   90:		//printGame(game, 1);
        -:   91:		//getch();
     4200:   92:		for(k = 0; k < game->numActions; k++){
     2076:   92-block  0
     2124:   92-block  1
     4200:   92-block  2
        -:   93:			//printf("Player %d actions: \n", game->whoseTurn+1);
    10008:   94:			for(i = 0; i < handCount; i++){
     2124:   94-block  0
     7884:   94-block  1
    10008:   94-block  2
     8712:   95:				if(game->hand[game->whoseTurn][i] > 6){
     8712:   95-block  0
        -:   96:
        -:   97:					//if the random choices mess up and make playcard return -1, then try and play again with
        -:   98:					//different choices. If there's really no way, then quit out after 500 plays
     2592:   99:					for(j = 0; playCard(i, rand()%handCount, rand()%handCount, rand()%handCount, game) && j < 10; j++){}
      972:   99-block  0
     1620:   99-block  1
     2592:   99-block  2
     1764:   99-block  3
        -:  100:
        -:  101:					//If it's really having trouble, then move onto the next card
      972:  102:					if(j >= 10) {
      972:  102-block  0
      144:  103:						continue;
      144:  103-block  0
        -:  104:					}
        -:  105:					//printf("Card %d played by player %d!\n", game->hand[game->whoseTurn][i], game->whoseTurn+1);
        -:  106:
      828:  107:					break;
      828:  107-block  0
        -:  108:				} 
        -:  109:			}
        -:  110:		}
        -:  111:
     4176:  112:		for(k = 0; k < game->numBuys; k++){
     2076:  112-block  0
     2100:  112-block  1
     4176:  112-block  2
        -:  113:			do{
     8628:  114:				i = rand()%(treasure_map + 1);
     8628:  114-block  0
     8628:  115:				if(getCost(i) - game->coins < 3)
     6360:  116:					j = buyCard(i, game);
     6360:  116-block  0
     8628:  117:			}while(j);
     8628:  117-block  0
        -:  118:			//printf("Player %d bought card %d\n", game->whoseTurn+1, i);
        -:  119:		}
     2076:  120:		endTurn(game);
     2076:  120-block  0
        -:  121:	}	
        -:  122:
       12:  123:	return 0;
       12:  123-block  0
       12:  123-block  1
        -:  124:}
